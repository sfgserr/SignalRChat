{"version":3,"sources":["utils/authConst.js","services/authService.js","providers/authProvider.js","components/auth/callback.jsx","routes/privateRoute.js","components/privatePage.jsx","routes/routes.js","components/auth/logout.jsx","components/auth/logoutCallback.jsx","components/auth/register.jsx","components/auth/silentRenew.jsx","components/publicPage.jsx","App.js","serviceWorker.js","index.js"],"names":["IDENTITY_CONFIG","authority","process","client_id","redirect_uri","silent_redirect_uri","post_logout_redirect_uri","audience","response_type","automaticSilentRenew","loadUserInfo","scope","METADATA_OIDC","issuer","jwks_uri","authorization_endpoint","token_endpoint","userinfo_endpoint","end_session_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","AuthService","constructor","this","signinRedirectCallback","UserManager","then","getUser","async","user","parseJwt","token","base64","split","replace","JSON","parse","window","atob","signinRedirect","localStorage","setItem","location","pathname","navigateToScreen","isAuthenticated","oidcStorage","sessionStorage","getItem","concat","access_token","signinSilent","console","log","catch","err","signinSilentCallback","createSigninRequest","logout","signoutRedirect","id_token_hint","clearStaleState","signoutRedirectCallback","clear","REACT_APP_PUBLIC_URL","userStore","WebStorageStateStore","store","metadata","Log","logger","level","DEBUG","events","addUserLoaded","href","indexOf","addSilentRenewError","e","message","addAccessTokenExpired","AuthContext","React","createContext","AuthConsumer","Consumer","AuthProvider","Component","props","super","authService","render","createElement","Provider","value","children","PrivateRoute","_ref","component","rest","Route","Object","assign","_ref2","renderFn","PrivatePage","Routes","Switch","exact","path","Callback","Logout","LogoutCallback","Register","SilentRenew","PublicPage","App","BrowserRouter","basename","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAGO,MAAMA,EAAkB,CAC7BC,UAAWC,yBACXC,UAAWD,cACXE,aAAcF,iCACdG,oBAAqBH,iCACrBI,yBAA0BJ,4BAC1BK,SAAUL,yBACVM,cAAe,OACfC,sBAAsB,EACtBC,cAAc,EACdC,MAAOT,yDAGIU,EAAgB,CAC3BC,OAAQX,yBACRY,SACAZ,+DACAa,uBAAwBb,2CACxBc,eAAgBd,uCAChBe,kBAAmBf,0CACnBgB,qBAAsBhB,4CACtBiB,qBACAjB,8CACAkB,oBAAqBlB,4CACrBmB,uBAAwBnB,wDCxBX,MAAMoB,EAGjBC,cAAcC,KA0BdC,uBAAyB,MACrBD,KAAKE,YAAYD,yBAAyBE,KAAK,UAGlDH,KAGDI,QAAUC,WACN,MAAMC,QAAaN,KAAKE,YAAYE,UACpC,OAAKE,SACYN,KAAKE,YAAYD,2BAGrCD,KAEDO,SAAYC,KACR,MACMC,EADYD,EAAME,MAAM,KAAK,GACVC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,KACxD,OAAOC,KAAKC,MAAMC,OAAOC,KAAKN,MACjCT,KAGDgB,eAAiB,MACbC,aAAaC,QAAQ,cAAeJ,OAAOK,SAASC,UACpDpB,KAAKE,YAAYc,eAAe,MACnChB,KAGDqB,iBAAmB,MACfP,OAAOK,SAASR,QAAQ,mBAC3BX,KAGDsB,gBAAkB,MACd,MAAMC,EAAcX,KAAKC,MAAMW,eAAeC,QAAO,aAAAC,OAAchD,yBAA8B,KAAAgD,OAAIhD,iBAErG,QAAU6C,KAAiBA,EAAYI,eAC1C3B,KAED4B,aAAe,MACX5B,KAAKE,YAAY0B,eACZzB,KAAMG,IACHuB,QAAQC,IAAI,YAAaxB,KAE5ByB,MAAOC,IACJH,QAAQC,IAAIE,OAEvBhC,KACDiC,qBAAuB,MACnBjC,KAAKE,YAAY+B,yBACpBjC,KAEDkC,oBAAsB,KACXlC,KAAKE,YAAYgC,uBAC3BlC,KAEDmC,OAAS,MACLnC,KAAKE,YAAYkC,gBAAgB,CAC7BC,cAAepB,aAAaQ,QAAQ,cAExCzB,KAAKE,YAAYoC,oBACpBtC,KAEDuC,wBAA0B,MACtBvC,KAAKE,YAAYqC,0BAA0BpC,KAAK,KAC5Cc,aAAauB,QACb1B,OAAOK,SAASR,QAAQjC,oqBAAY+D,wBAExCzC,KAAKE,YAAYoC,oBA7FjBtC,KAAKE,YAAc,IAAIA,cAAY,IAC5B1B,EACHkE,UAAW,IAAIC,uBAAqB,CAAEC,MAAO9B,OAAOU,iBACpDqB,SAAU,IACHzD,KAIX0D,MAAIC,OAASlB,QACbiB,MAAIE,MAAQF,MAAIG,MAChBjD,KAAKE,YAAYgD,OAAOC,cAAe7C,KACkB,IAAjDQ,OAAOK,SAASiC,KAAKC,QAAQ,gBAC7BrD,KAAKqB,qBAGbrB,KAAKE,YAAYgD,OAAOI,oBAAqBC,IACzC1B,QAAQC,IAAI,qBAAsByB,EAAEC,WAGxCxD,KAAKE,YAAYgD,OAAOO,sBAAsB,KAC1C5B,QAAQC,IAAI,iBACZ9B,KAAKmC,YCzBjB,MAAMuB,EAAcC,IAAMC,cAAc,CACpC3D,uBAAwBA,KAAA,IACxBkC,OAAQA,KAAA,IACRI,wBAAyBA,KAAA,IACzBjB,gBAAiBA,KAAA,IACjBN,eAAgBA,KAAA,IAChBiB,qBAAsBA,KAAA,IACtBC,oBAAqBA,KAAA,MAGZ2B,EAAeH,EAAYI,SAEjC,MAAMC,UAAqBC,YAE9BjE,YAAYkE,GACRC,MAAMD,GACNjE,KAAKmE,YAAc,IAAIrE,EAE3BsE,SACI,OAAOT,IAAAU,cAACX,EAAYY,SAAQ,CAACC,MAAOvE,KAAKmE,aAAcnE,KAAKiE,MAAMO,6BClBnE,MCAMC,EAAeC,IAA4B,IAA3BC,UAAEA,KAAcC,GAAMF,EAcjD,OAAOf,IAAAU,cAACQ,IAAKC,OAAAC,OAAA,GAAKH,EAAI,CAAER,OAbPJ,IAAaC,GAC5BN,IAAAU,cAACR,EAAY,KACVmB,IAAyC,IAAxC1D,gBAAEA,EAAeN,eAAEA,GAAgBgE,EACnC,OAAMhB,GAAa1C,IACVqC,IAAAU,cAACL,EAAcC,IAEtBjD,IACO2C,IAAAU,cAAA,YAAM,cAMWY,CAASN,OChB9BO,EAAcA,IAEnBvB,IAAAU,cAAA,WAAK,gBCQAc,EACTxB,gBAACyB,IAAM,KACHzB,gBAACkB,IAAK,CAACQ,OAAO,EAAMC,KAAK,eAAeX,UHVxBY,IACpB5B,gBAACE,EAAY,KACRa,IAAgC,IAA/BzE,uBAAEA,GAAwByE,EAExB,OADAzE,IACO0D,gBAAA,YAAM,eGOjBA,gBAACkB,IAAK,CAACQ,OAAO,EAAMC,KAAK,UAAUX,UCVrBa,IAClB7B,gBAACE,EAAY,KACRa,IAAgB,IAAfvC,OAAEA,GAAQuC,EAER,OADAvC,IACOwB,gBAAA,YAAM,eDOjBA,gBAACkB,IAAK,CACFQ,OAAO,EACPC,KAAK,mBACLX,UEdkBc,IAC1B9B,IAAAU,cAACR,EAAY,KACRa,IAAiC,IAAhCnC,wBAAEA,GAAyBmC,EAEzB,OADAnC,IACOoB,IAAAU,cAAA,YAAM,eFYjBV,gBAACkB,IAAK,CACFQ,OAAO,EACPC,KAAK,2CACLX,UGtBYe,IAEhB/B,IAAAU,cAAA,WAAK,cHsBLV,gBAACkB,IAAK,CAACQ,OAAO,EAAMC,KAAK,eAAeX,UIpBrBgB,IACvBhC,IAAAU,cAACR,EAAY,KACRa,IAA8B,IAA7BzC,qBAAEA,GAAsByC,EAEtB,OADAzC,IACO0B,IAAAU,cAAA,YAAM,eJiBjBV,gBAACc,EAAY,CACTa,KAAK,WACLX,UAAWO,IAEfvB,gBAACc,EAAY,CAACa,KAAK,aAAaX,UAAWO,IAE3CvB,gBAACkB,IAAK,CAACS,KAAK,IAAIX,UK/BEiB,KAItB,OACIjC,IAAAU,cAAA,WAJK3F,cACE,mBCER,MAAMmH,UAAY7B,YACvBI,SAEE,OADAvC,QAAQC,IAAIpD,eAEViF,IAAAU,cAACN,EAAY,KACXJ,IAAAU,cAACyB,IAAa,CAACtB,SAAUW,EAAQY,SAAU,QCC/BC,QACW,cAA7BlF,OAAOK,SAAS8E,UAEe,UAA7BnF,OAAOK,SAAS8E,UAEhBnF,OAAOK,SAAS8E,SAASC,MACvB,2DCZNC,IAAS/B,OAAOT,IAAAU,cAACwB,EAAG,MAAKO,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrG,KAAKsG,IACjCA,EAAaC","file":"static/js/main.e9dd165f.chunk.js","sourcesContent":["\n\n\nexport const IDENTITY_CONFIG = {\n  authority: process.env.REACT_APP_AUTH_URL,\n  client_id: process.env.REACT_APP_IDENTITY_CLIENT_ID,\n  redirect_uri: process.env.REACT_APP_REDIRECT_URL,\n  silent_redirect_uri: process.env.REACT_APP_SILENT_REDIRECT_URL,\n  post_logout_redirect_uri: process.env.REACT_APP_LOGOFF_REDIRECT_URL,\n  audience: process.env.REACT_APP_AUDIENCE,\n  response_type: \"code\",\n  automaticSilentRenew: false,\n  loadUserInfo: true,\n  scope: process.env.REACT_APP_SCOPE\n};\n\nexport const METADATA_OIDC = {\n  issuer: process.env.REACT_APP_ISSUER,\n  jwks_uri:\n  process.env.REACT_APP_AUTH_URL + \"/.well-known/openid-configuration/jwks\",\n  authorization_endpoint: process.env.REACT_APP_AUTH_URL + \"/connect/authorize\",\n  token_endpoint: process.env.REACT_APP_AUTH_URL + \"/connect/token\",\n  userinfo_endpoint: process.env.REACT_APP_AUTH_URL + \"/connect/userinfo\",\n  end_session_endpoint: process.env.REACT_APP_AUTH_URL + \"/connect/endsession\",\n  check_session_iframe:\n  process.env.REACT_APP_AUTH_URL + \"/connect/checksession\",\n  revocation_endpoint: process.env.REACT_APP_AUTH_URL + \"/connect/revocation\",\n  introspection_endpoint: process.env.REACT_APP_AUTH_URL + \"/connect/introspect\"\n};\n","import { IDENTITY_CONFIG, METADATA_OIDC } from \"../utils/authConst\";\nimport { UserManager, WebStorageStateStore, Log } from \"oidc-client\";\n\nexport default class AuthService {\n    UserManager;\n\n    constructor() {\n        this.UserManager = new UserManager({\n            ...IDENTITY_CONFIG,\n            userStore: new WebStorageStateStore({ store: window.sessionStorage }),\n            metadata: {\n                ...METADATA_OIDC\n            }\n        });\n        // Logger\n        Log.logger = console;\n        Log.level = Log.DEBUG;\n        this.UserManager.events.addUserLoaded((user) => {\n            if (window.location.href.indexOf(\"signin-oidc\") !== -1) {\n                this.navigateToScreen();\n            }\n        });\n        this.UserManager.events.addSilentRenewError((e) => {\n            console.log(\"silent renew error\", e.message);\n        });\n\n        this.UserManager.events.addAccessTokenExpired(() => {\n            console.log(\"token expired\");\n            this.logout();\n        });\n    }\n\n    signinRedirectCallback = () => {\n        this.UserManager.signinRedirectCallback().then(() => {\n            \"\";\n        });\n    };\n\n\n    getUser = async () => {\n        const user = await this.UserManager.getUser();\n        if (!user) {\n            return await this.UserManager.signinRedirectCallback();\n        }\n        return user;\n    };\n\n    parseJwt = (token) => {\n        const base64Url = token.split(\".\")[1];\n        const base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n        return JSON.parse(window.atob(base64));\n    };\n\n\n    signinRedirect = () => {\n        localStorage.setItem(\"redirectUri\", window.location.pathname);\n        this.UserManager.signinRedirect({});\n    };\n\n\n    navigateToScreen = () => {\n        window.location.replace(\"/en/dashboard\");\n    };\n\n\n    isAuthenticated = () => {\n        const oidcStorage = JSON.parse(sessionStorage.getItem(`oidc.user:${process.env.REACT_APP_AUTH_URL}:${process.env.REACT_APP_IDENTITY_CLIENT_ID}`))\n\n        return (!!oidcStorage && !!oidcStorage.access_token)\n    };\n\n    signinSilent = () => {\n        this.UserManager.signinSilent()\n            .then((user) => {\n                console.log(\"signed in\", user);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    signinSilentCallback = () => {\n        this.UserManager.signinSilentCallback();\n    };\n\n    createSigninRequest = () => {\n        return this.UserManager.createSigninRequest();\n    };\n\n    logout = () => {\n        this.UserManager.signoutRedirect({\n            id_token_hint: localStorage.getItem(\"id_token\")\n        });\n        this.UserManager.clearStaleState();\n    };\n\n    signoutRedirectCallback = () => {\n        this.UserManager.signoutRedirectCallback().then(() => {\n            localStorage.clear();\n            window.location.replace(process.env.REACT_APP_PUBLIC_URL);\n        });\n        this.UserManager.clearStaleState();\n    };\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../services/authService\";\n\nconst AuthContext = React.createContext({\n    signinRedirectCallback: () => ({}),\n    logout: () => ({}),\n    signoutRedirectCallback: () => ({}),\n    isAuthenticated: () => ({}),\n    signinRedirect: () => ({}),\n    signinSilentCallback: () => ({}),\n    createSigninRequest: () => ({})\n});\n\nexport const AuthConsumer = AuthContext.Consumer;\n\nexport class AuthProvider extends Component {\n    authService;\n    constructor(props) {\n        super(props);\n        this.authService = new AuthService();\n    }\n    render() {\n        return <AuthContext.Provider value={this.authService}>{this.props.children}</AuthContext.Provider>;\n    }\n}\n","import * as React from \"react\";\n\nimport { AuthConsumer } from \"../../providers/authProvider\";\n\nexport const Callback = () => (\n    <AuthConsumer>\n        {({ signinRedirectCallback }) => {\n            signinRedirectCallback();\n            return <span>loading</span>;\n        }}\n    </AuthConsumer>\n);","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { AuthConsumer } from \"../providers/authProvider\";\n\nexport const PrivateRoute = ({ component, ...rest }) => {\n  const renderFn = Component => props => (\n    <AuthConsumer>\n      {({ isAuthenticated, signinRedirect }) => {\n        if (!!Component && isAuthenticated()) {\n          return <Component {...props} />;\n        } else {\n          signinRedirect();\n          return <span>loading</span>;\n        }\n      }}\n    </AuthConsumer>\n  );\n\n  return <Route {...rest} render={renderFn(component)} />;\n};\n","import React from 'react';\n\nexport const PrivatePage = () => {\n    return (\n        <div>\n            Private page\n        </div>\n    );\n};\n","import * as React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { Callback } from \"../components/auth/callback\";\nimport { Logout } from \"../components/auth/logout\";\nimport { LogoutCallback } from \"../components/auth/logoutCallback\";\nimport { PrivateRoute } from \"./privateRoute\";\nimport { Register } from \"../components/auth/register\";\nimport { SilentRenew } from \"../components/auth/silentRenew\";\nimport { PublicPage } from \"../components/publicPage\";\nimport { PrivatePage } from \"../components/privatePage\";\n\nexport const Routes = (\n    <Switch>\n        <Route exact={true} path=\"/signin-oidc\" component={Callback} />\n        <Route exact={true} path=\"/logout\" component={Logout} />\n        <Route\n            exact={true}\n            path=\"/logout/callback\"\n            component={LogoutCallback}\n        />\n        <Route\n            exact={true}\n            path=\"/:lng(en|es|de|fr|pt|it)/register/:form?\"\n            component={Register}\n        />\n        <Route exact={true} path=\"/silentrenew\" component={SilentRenew} />\n        <PrivateRoute\n            path=\"/private\"\n            component={PrivatePage}\n        />\n        <PrivateRoute path=\"/dashboard\" component={PrivatePage} />\n\n        <Route path=\"/\" component={PublicPage} />\n    </Switch>\n);\n","/* /src/components/auth/logout.jsx */\n\nimport * as React from \"react\";\nimport { AuthConsumer } from \"../../providers/authProvider\";\n\nexport const Logout = () => (\n    <AuthConsumer>\n        {({ logout }) => {\n            logout();\n            return <span>loading</span>;\n        }}\n    </AuthConsumer>\n);","/* /src/components/auth/logoutCallback.jsx */\n\nimport React from \"react\";\nimport { AuthConsumer } from \"../../providers/authProvider\";\n\nexport const LogoutCallback = () => (\n    <AuthConsumer>\n        {({ signoutRedirectCallback }) => {\n            signoutRedirectCallback();\n            return <span>loading</span>;\n        }}\n    </AuthConsumer>\n);","import React from 'react';\n\nexport const Register = () => {\n    return (\n        <div>\n            register\n        </div>\n    );\n};\n","/* /src/components/auth/silentRenew.jsx */\n\nimport React from \"react\";\n\nimport { AuthConsumer } from \"../../providers/authProvider\";\n\nexport const SilentRenew = () => (\n    <AuthConsumer>\n        {({ signinSilentCallback }) => {\n            signinSilentCallback();\n            return <span>loading</span>;\n        }}\n    </AuthConsumer>\n);","import React from 'react';\n\nexport const PublicPage = () => {\n    let id = process.env.REACT_APP_IDENTITY_CLIENT_ID;\n    let text = 'Public page';\n    \n    return (\n        <div>\n            {id}\n            {text}\n        </div>\n    );\n};\n","import React, { Component } from \"react\";\nimport { AuthProvider } from \"./providers/authProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Routes } from \"./routes/routes\";\n\n\nexport class App extends Component {\n  render() {\n    console.log(process.env.REACT_APP_IDENTITY_CLIENT_ID);\n    return (\n      <AuthProvider>\n        <BrowserRouter children={Routes} basename={\"/\"} />\n      </AuthProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}