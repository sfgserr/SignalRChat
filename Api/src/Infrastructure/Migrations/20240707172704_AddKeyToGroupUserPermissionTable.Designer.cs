// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240707172704_AddKeyToGroupUserPermissionTable")]
    partial class AddKeyToGroupUserPermissionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Messages.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Proccessed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("Domain.Groups.Group", b =>
                {
                    b.OwnsMany("Domain.Groups.GroupUser", "Users", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("JoinedDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("JoinedDate");

                            b1.HasKey("UserId", "GroupId");

                            b1.HasIndex("GroupId");

                            b1.ToTable("GroupUsers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GroupId");

                            b1.OwnsOne("Domain.Groups.GroupUserRole", "Role", b2 =>
                                {
                                    b2.Property<string>("Value")
                                        .HasColumnType("nvarchar(450)")
                                        .HasColumnName("Value");

                                    b2.Property<Guid>("GroupUserGroupId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("GroupUserUserId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Value");

                                    b2.HasIndex("GroupUserUserId", "GroupUserGroupId")
                                        .IsUnique();

                                    b2.ToTable("GroupUserRoles", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("GroupUserUserId", "GroupUserGroupId");

                                    b2.OwnsMany("Domain.Groups.GroupUserPermission", "Permissions", b3 =>
                                        {
                                            b3.Property<string>("Code")
                                                .HasColumnType("nvarchar(450)")
                                                .HasColumnName("Code");

                                            b3.Property<string>("GroupUserRoleValue")
                                                .IsRequired()
                                                .HasColumnType("nvarchar(450)");

                                            b3.HasKey("Code");

                                            b3.HasIndex("GroupUserRoleValue");

                                            b3.ToTable("GroupUserPermissions", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("GroupUserRoleValue");
                                        });

                                    b2.Navigation("Permissions");
                                });

                            b1.Navigation("Role")
                                .IsRequired();
                        });

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
